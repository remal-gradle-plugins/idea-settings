allprojects {

    ext['isRunningOnCi'] = false
    if (System.getenv('CI') == 'true') {
        ext['isRunningOnCi'] = true
    }
    ext['isNotRunningOnCi'] = !ext['isRunningOnCi']

    String gitRef = property('git-ref')
    String versionGitRefPrefix = 'refs/tags/v'
    if (gitRef.startsWith(versionGitRefPrefix)) {
        String versionFromGitRef = gitRef.substring(versionGitRefPrefix.length())
        String majorVersion = property('majorVersion')
        if (!versionFromGitRef.startsWith("${majorVersion}.")) {
            throw new GradleException(
                "Version from Git ref doesn't start with major version ${majorVersion}: ${versionFromGitRef}"
            )
        }
        project.version = versionFromGitRef
        if (project == rootProject) {
            println "Version from Git tag: ${project.version}"
        }
    }

    //gradle.startParameter.showStacktrace = 'ALWAYS'

    tasks.create('downloadDependencies') {
        doLast {
            project.configurations
                .findAll { it.canBeResolved }
                .findAll { it.name != 'default' }
                .findAll { it.name != 'archives' }
                .forEach { configuration ->
                    configuration.resolvedConfiguration.lenientConfiguration.files
                }
        }
    }

    tasks.register('allClasses') { Task task ->
        pluginManager.withPlugin('java') {
            sourceSets.all { SourceSet sourceSet ->
                task.dependsOn(sourceSet.classesTaskName)
            }
        }
    }

    afterEvaluate {
        tasks.maybeCreate('allTests')
    }

    tasks.create('buildWithAllTests') {
        group = 'build'
        dependsOn(project.tasks.matching { it.name == 'build' })
        dependsOn(project.tasks.matching { it.name == 'allTests' })
    }

    tasks.create('buildInstall') {
        group = 'build'
        dependsOn('build')
        dependsOn(project.tasks.matching { it.name == 'publishToMavenLocal' })
    }

    tasks.create('buildInstallWithAllTests') {
        group = 'build'
        dependsOn('buildWithAllTests')
        dependsOn(project.tasks.matching { it.name == 'publishToMavenLocal' })
    }

    project.tasks.matching { it.name == 'publishToMavenLocal' }.all {
        mustRunAfter(
            project.provider {
                project.rootProject.allprojects
                    .collect { it.tasks }
                    .collect { it.matching { it.name == 'build' || it.name == 'allTests' } }
                    .toList()
            }
        )
    }


    afterEvaluate {
        def disableTask = { Task task ->
            task.enabled = false
            task.onlyIf { false }
            task.dependsOn = []
            Iterator registeredFileProperties = task.inputs.registeredFileProperties.iterator()
            while (registeredFileProperties.hasNext()) {
                registeredFileProperties.next()
                registeredFileProperties.remove()
            }
        }

        def isVerificationTask = { Task task ->
            if (task instanceof AbstractTestTask) {
                return true
            }
            if (task instanceof VerificationTask) {
                return true
            }
            if (task instanceof ValidatePlugins) {
                return true
            }
            return false
        }


        if (property('disable-compilation')?.toString()?.toBoolean()) {
            tasks.matching { it instanceof AbstractCompile }.all { disableTask(it) }

            pluginManager.withPlugin('java') {
                sourceSets.all { SourceSet sourceSet ->
                    tasks.matching { it.name == sourceSet.processResourcesTaskName }.all { disableTask(it) }
                }
            }
        }

        if (property('disable-tests')?.toString()?.toBoolean()) {
            tasks.matching { it instanceof AbstractTestTask }.all { disableTask(it) }
        }

        if (property('disable-verification')?.toString()?.toBoolean()) {
            tasks.matching { isVerificationTask(it) }.all { disableTask(it) }
        }

        if (property('disable-verification-except-tests')?.toString()?.toBoolean()) {
            tasks.matching { isVerificationTask(it) && !(it instanceof AbstractTestTask) }.all { disableTask(it) }
        }
    }

}
