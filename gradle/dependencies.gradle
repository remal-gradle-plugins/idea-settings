allprojects {
    configurations.create('projectDependencyConstraints') { Configuration conf ->
        conf.dependencies.addAll(
            [
                'name.remal.gradle-plugins.toolkit:toolkit-bom:0.17.0',
                'org.ow2.asm:asm-bom:9.3',
                'org.junit:junit-bom:5.8.2',
                'org.mockito:mockito-bom:4.6.1',
            ].collect { project.dependencies.platform(it) }
        )

        conf.dependencyConstraints.addAll(
            [
                // Static analysis
                'com.google.code.findbugs:jsr305:3.0.2',
                'org.jetbrains:annotations:23.0.0',
                'com.google.errorprone:error_prone_annotations:2.14.0',
                'com.google.errorprone:error_prone_core:2.14.0',

                // Annotation processing
                'org.projectlombok:lombok:1.18.24',

                // Compile-only
                'name.remal:gradle-plugins-api:1.6.0',

                // Compile
                "name.remal.gradle-api:local-groovy:${property('gradle-api.version')}",
                "name.remal.gradle-api:gradle-api:${property('gradle-api.version')}",

                // Test
                "name.remal.gradle-api:gradle-test-kit:${property('gradle-api.version')}",
                'org.assertj:assertj-core:3.23.1',
            ].collect {
                project.dependencies.constraints.create(it) { DependencyConstraint constraint ->
                    constraint.version { it.strictly(constraint.version) }
                }
            }
        )

        conf.extendsFrom = []
        conf.visible = false
        conf.canBeConsumed = false
        conf.canBeResolved = false
        conf.description(
            'Dependency constraints'
        )

        configurations.matching { it != conf }.configureEach { extendsFrom(conf) }
    }

    configurations.all {
        dependencies.all {
            if (group == 'com.google.guava' && name == 'guava') {
                exclude(group: 'com.google.code.findbugs')
                exclude(group: 'org.checkerframework')
                exclude(group: 'com.google.errorprone')
                exclude(group: 'com.google.j2objc')
            }
        }
    }
}
