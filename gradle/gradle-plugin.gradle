allprojects {
    pluginManager.withPlugin('java-gradle-plugin') {
        afterEvaluate {
            configurations.all { Configuration conf ->
                conf.dependencies.removeIf {
                    it instanceof SelfResolvingDependency && it.files.toString() != 'file collection'
                }
            }
        }

        testSourceSets.create('functional')

        dependencies {
            optional 'name.remal.gradle-api:gradle-api'

            testImplementation 'name.remal.gradle-api:gradle-test-kit'
        }


        ext['getCorrespondingKotlinVersion'] = rootProject.findProperty('getCorrespondingKotlinVersion') ?: {
            Dependency apiDep = project.dependencies.create(
                "name.remal.gradle-api:gradle-api:${property('gradle-api.version')}"
            )
            Configuration tempConf = configurations.detachedConfiguration(apiDep)
            ResolvedDependency kotlinDep = tempConf.resolvedConfiguration
                .lenientConfiguration
                .allModuleDependencies
                .find { it.moduleGroup == 'org.jetbrains.kotlin' }

            return kotlinDep?.moduleVersion
        }.memoize()

        tasks.matching { it instanceof JavaForkOptions }.configureEach {
            String correspondingKotlinVersion = getCorrespondingKotlinVersion()
            if (correspondingKotlinVersion != null) {
                onlyIf {
                    systemProperty('corresponding-kotlin.version', correspondingKotlinVersion)
                    return true
                }
            }
        }


        configurations.create('correspondingKotlinPlugin') { Configuration conf ->
            conf.defaultDependencies { deps ->
                String correspondingKotlinVersion = getCorrespondingKotlinVersion()
                if (correspondingKotlinVersion != null) {
                    Dependency kotlinPluginDep = project.dependencies.create(
                        "org.jetbrains.kotlin:kotlin-gradle-plugin:${correspondingKotlinVersion}"
                    ) {
                        exclude group: 'commons-logging', module: 'commons-logging'
                    }

                    deps.add(kotlinPluginDep)
                }
            }

            conf.extendsFrom = []
            conf.description(
                'Kotlin Gradle plugin os the same version, as Kotlin that bundled in the current Gradle instance'
            )
        }
    }
}
