allprojects {
    tasks.create('processReadme') {
        group = 'documentation'
        doLast {
            FileTree files = project.fileTree(project.projectDir) {
                include('README.md')
            }
            files.visit { FileVisitDetails details ->
                if (details.directory) return
                File readmeFile = details.file
                logger.lifecycle('Processing {}', readmeFile)
                String content = readmeFile.getText('UTF-8')

                content = content.replaceAll(
                    /<!--\s*(property)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String property = it[2]
                    Object propertyValueObj = project.property(property)
                    if (propertyValueObj instanceof Provider) {
                        propertyValueObj = propertyValueObj.getOrNull()
                    }
                    String propertyValue = propertyValueObj?.toString()
                    logger.lifecycle('Handling {}: {}', tag, property)
                    return "<!--$tag:$property-->$propertyValue<!--/$tag-->"
                }

                content = content.replaceAll(
                    /<!--\s*(include(?:-([^:>]+))?)\s*:\s*([^>]+?)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
                ) {
                    String tag = it[1]
                    String lang = it[2] ?: ''
                    String filePath = it[3]
                    File file = file(filePath)
                    String includeContent = file.getText('UTF-8')
                        .replace('\r\n', '\n')
                        .replace('\n\r', '\n')
                        .replace('\r', '\n')
                    while (includeContent.startsWith('\n')) {
                        includeContent = includeContent.substring(1)
                    }
                    while (includeContent.endsWith('\n')) {
                        includeContent = includeContent.substring(0, includeContent.length() - 1)
                    }
                    logger.lifecycle('Handling {}: {}', tag, filePath)
                    return "<!--$tag:$filePath-->\n```$lang\n$includeContent\n```\n<!--/$tag -->"
                }

                readmeFile.setText(content, 'UTF-8')
            }
        }
    }
}
