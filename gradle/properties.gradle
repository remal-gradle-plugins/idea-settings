import org.gradle.util.GradleVersion

allprojects {
    File ciPropertiesFile = rootProject.file("${rootProject.buildDir}/gradle-ci.properties")
    synchronized (rootProject) {
        if (!rootProject.hasProperty('ciProperties')) {
            Properties props = new Properties()
            rootProject.ext['ciProperties'] = props
            if (ciPropertiesFile.isFile()) {
                ciPropertiesFile.newInputStream().withCloseable { props.load(it) }
            }
        }
    }

    def getCiProperty = { String name, String defaultValue, boolean storeValue = false ->
        Properties ciProperties = rootProject.ext['ciProperties']
        String value = ciProperties.getProperty(name)
        if (value == null) {
            value = rootProject.findProperty(name)?.toString()
        }
        if (value == null) {
            value = System.getProperty(name)
        }
        if (value == null) {
            String envName = name.replaceAll(/\W/, '_').toUpperCase()
            value = System.getenv(envName)
        }

        if (value != null) {
            if (storeValue) {
                ciProperties.setProperty(name, value)
                synchronized (rootProject) {
                    ciPropertiesFile.parentFile.mkdirs()
                    ciPropertiesFile.newOutputStream().withCloseable { ciProperties.store(it, null) }
                }
            }
            return value
        } else {
            return defaultValue
        }
    }

    project.ext['git-ref'] = getCiProperty('git-ref', '')

    project.ext['gradle-api.version'] = getCiProperty('gradle-api.version', GradleVersion.current().version)

    project.ext['disable-compilation'] = getCiProperty('disable-compilation', 'false')
    project.ext['disable-tests'] = getCiProperty('disable-tests', 'false')
    project.ext['disable-verification'] = getCiProperty('disable-verification', 'false')
    project.ext['disable-verification-except-tests'] = getCiProperty('disable-verification-except-tests', 'false')

    project.ext['repository-name'] = getCiProperty('repository-name', '', true)
    project.ext['repository-full-name'] = getCiProperty('repository-full-name', '', true)
    project.ext['repository-html-url'] = getCiProperty('repository-html-url', '', true)
    project.ext['repository-description'] = getCiProperty('repository-description', '', true)
    project.ext['repository-topics'] = getCiProperty('repository-topics', '', true)
    project.ext['repository-is-template'] = getCiProperty('repository-is-template', '', true)
    project.ext['repository-owner-name'] = getCiProperty('repository-owner-name', '', true)
    project.ext['repository-license-name'] = getCiProperty('repository-license-name', '', true)
    project.ext['repository-license-html-url'] = getCiProperty('repository-license-html-url', '', true)


    File rootProjectDir = file(project.rootDir)
    if (rootProjectDir.name == 'buildSrc') rootProjectDir = rootProjectDir.parentFile
    project.ext['rootProjectDir'] = rootProjectDir

    String currentVersion = project.version.toString()
    if (currentVersion.matches(/^(0|[1-9]\d*)(\D.*)?$/)) {
        project.ext['majorVersion'] = currentVersion.replaceFirst(/^(\d+).*/, '$1')
    }

    String rootPackage = rootProject.group
    if (!rootPackage.endsWith(".${rootProject.name}")) {
        rootPackage += ".${rootProject.name}"
    }
    String baseJavaPackage = "${rootPackage}${project.path}"
        .replace(':', '.')
        .replaceAll(/\.{2,}/, '.')
        .replaceFirst(/\.+$/, '')
        .replaceAll(/[^\w.]/, '')
    List<String> baseJavaPackageTokens = baseJavaPackage.split(/\./)
    for (int i = baseJavaPackageTokens.size() - 1; 1 <= i; --i) {
        String prefix = baseJavaPackageTokens[i - 1]
        String current = baseJavaPackageTokens[i]
        if (current.startsWith(prefix)) {
            baseJavaPackageTokens[i] = current.substring(prefix.length())
        }
    }
    baseJavaPackage = baseJavaPackageTokens.join('.')
    project.ext['baseJavaPackage'] = baseJavaPackage
    project.ext['javaModuleName'] = baseJavaPackage
}
