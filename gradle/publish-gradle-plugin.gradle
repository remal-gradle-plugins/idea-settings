allprojects {
    pluginManager.withPlugin('java-gradle-plugin') {
        apply plugin: 'com.gradle.plugin-publish'

        pluginBundle.with {
            it.website = property('repository-html-url')
            it.vcsUrl = property('repository-html-url')
            it.tags = property('repository-topics').toString().split(/,/)
                .collect { it.trim().toLowerCase() }
                .findAll { !it.isEmpty() }
                .findAll { it != 'gradle' && it != 'plugin' }
        }

        pluginManager.withPlugin('maven-publish') {
            afterEvaluate {
                publishing.publications.withType(MavenPublication).findAll({ it.component != null }).forEach { pub ->
                    MavenArtifactSet artifacts = pub.artifacts
                    ['sources', 'javadoc', 'groovydoc'].forEach { classifier ->
                        if (!artifacts.any { it.classifier == classifier }) {
                            Jar jarTask = tasks.withType(Jar).find { it.archiveClassifier.getOrNull() == classifier }
                            if (jarTask != null) {
                                pub.artifact(jarTask)
                            }
                        }
                    }
                }
            }
        }

        pluginManager.withPlugin('name.remal.generate-sources') {
            tasks.matching { it.name == 'publishPluginJar' }.configureEach {
                Set<String> generateTasks = [
                    'generateResources',
                    'generateJava',
                    'generateKotlin',
                    'generateGroovy',
                ].toSet()
                dependsOn(
                    tasks.matching { generateTasks.contains(it.name) }
                )
            }
        }
    }
}
