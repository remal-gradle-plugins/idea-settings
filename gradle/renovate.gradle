allprojects {
    def forSettings = { action ->
        synchronized (Project.class) {
            File settingsFile = rootProject.file('.github/renovate.json')
            Class JsonSlurper = Class.forName('groovy.json.JsonSlurper')
            def jsonSlurper = JsonSlurper.getConstructor().newInstance()
            def settings = jsonSlurper.parse(settingsFile)

            action(settings)

            Class JsonOutput = Class.forName('groovy.json.JsonOutput')
            String json = JsonOutput.toJson(settings)
            String prettyJson = JsonOutput.prettyPrint(json)
                .replaceAll(/(?m)^(([ ]{4})+)/) { ' '.repeat((it[0].length() / 2).toInteger()) }
                .replaceAll(/\[(\n[ ]*)+]/, '[]')
                .replaceAll(/\{(\n[ ]*)+}/, '[]')
            settingsFile.setText(prettyJson + '\n', 'UTF-8')
        }
    }

    Task configureRenovate = tasks.maybeCreate('configureRenovate')
    configureRenovate.mustRunAfter(
        provider {
            List<String> allTaskPaths = rootProject.allprojects.tasks
                .collect { it[configureRenovate.name] }.collect { it.path }
            allTaskPaths.sort()
            int index = allTaskPaths.indexOf(configureRenovate.path)
            if (index > 0) {
                return allTaskPaths[index - 1]
            } else {
                return []
            }
        }
    )

    configureRenovate.doLast {
        forSettings { settings ->
            def packageRules = settings.packageRules
            if (packageRules instanceof List) {
                packageRules.removeIf {
                    def description = it.description
                    if (description instanceof List && description.size() >= 2) {
                        if (description[0] == 'plugin-api') {
                            if (description[1] == project.path
                                || !project.rootProject.allprojects.collect { it.path }.contains(description[1])
                            ) {
                                return true
                            }
                        }
                    }
                    return false
                }
            }
        }
    }

    pluginManager.withPlugin('java-library') {
        configureRenovate.doLast {
            forSettings { settings ->
                Configuration apiConf = configurations[sourceSets.main.apiConfigurationName]
                Configuration indirectApiConf = configurations.indirectApi
                List<String> apiDeps = [apiConf.allDependencies, indirectApiConf.allDependencies]
                    .flatten()
                    .findAll { it instanceof ExternalModuleDependency }
                    .findAll { !(it instanceof ClientModule) }
                    .findAll { it.attributes.getAttribute(Category.CATEGORY_ATTRIBUTE) == null }
                    .collect { "${it.group}:${it.name}" }
                    .unique(false)

                def packageRules = settings.packageRules
                if (!(packageRules instanceof List)) {
                    packageRules = []
                    settings.packageRules = packageRules
                }

                boolean shouldDuplicateBeRemoved = false
                if (shouldDuplicateBeRemoved) {
                    apiDeps.removeIf { String apiDep ->
                        return packageRules.any { rule ->
                            if (rule.description instanceof List
                                && rule.description.size() >= 2
                                && rule.description[0] == 'plugin-api'
                            ) {
                                if (rule.packageNames instanceof Collection) {
                                    return rule.packageNames.contains(apiDep)
                                }
                            }
                            return false
                        }
                    }
                }

                if (apiDeps.isEmpty()) return

                packageRules.add(
                    [
                        'description'       : [
                            'plugin-api',
                            project.path,
                            "Plugin API dependencies for '${project.path}' Gradle project"
                        ],
                        'packageNames'      : apiDeps,
                        'commitMessageTopic': "plugin API dependency {{depName}}"
                    ]
                )
            }
        }
    }
}
